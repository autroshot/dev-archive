---
import Draft from '@components/markdown/draft.astro';
import Reference from '@components/markdown/reference.astro';
import Series from '@components/markdown/series.astro';
import Source from '@components/markdown/source.astro';
import PostNav from '@components/post-nav.astro';
import TagList from '@components/tag-list.astro';
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../components/formatted-date.astro';
import BaseLayout from './base/index.astro';

const { currentPostData, olderPostData, newerPostData, seriesData } =
  Astro.props;

interface Props {
  currentPostData: CollectionEntry<'blog'>['data'];
  olderPostData?: CollectionEntry<'blog'>['data'];
  newerPostData?: CollectionEntry<'blog'>['data'];
  seriesData: CollectionEntry<'series'>['data'] | undefined;
}
---

<BaseLayout
  title={currentPostData.title}
  description={currentPostData.description}
  class="lg:max-w-screen-lg"
>
  <article class="prose prose-sm max-w-none dark:prose-invert lg:prose-base">
    <div class="not-prose mb-10 text-center">
      <h1 class="mb-4 font-noto-sans-kr text-4xl font-bold lg:text-5xl">
        {currentPostData.title}
      </h1>
      <div class="text-center">
        {
          currentPostData.tags ? (
            <TagList texts={currentPostData.tags} class="justify-center" />
          ) : null
        }
      </div>
      <div class="mb-2 mt-2">
        <FormattedDate date={currentPostData.publishedDate} />
        {
          currentPostData.updatedDate && (
            <div class="italic">
              Last updated on{' '}
              <FormattedDate date={currentPostData.updatedDate} />
            </div>
          )
        }
      </div>
      <hr />
    </div>
    {currentPostData.isDraft ? <Draft /> : null}
    {seriesData ? <Series seriesData={seriesData} /> : null}
    {
      currentPostData.source ? (
        <Source
          name={currentPostData.source.name}
          url={currentPostData.source.url}
        />
      ) : null
    }
    <p>{currentPostData.description}</p>
    <slot />
    {
      currentPostData.references && currentPostData.references.length !== 0 ? (
        <Reference references={currentPostData.references} />
      ) : null
    }
  </article>
  {
    olderPostData || newerPostData ? (
      <PostNav
        olderPostTitle={olderPostData?.title}
        newerPostTitle={newerPostData?.title}
        class="mt-10"
      />
    ) : null
  }
  <div id="utterances-container"></div>

  <script>
    const script = document.createElement('script');
    const container = document.querySelector('#utterances-container');
    const siteTheme = localStorage.getItem('theme');
    const theme = siteTheme === 'light' ? 'github-light' : 'github-dark';

    Object.entries({
      src: 'https://utteranc.es/client.js',
      repo: 'autroshot/dev-archive',
      'issue-term': 'title',
      label: 'comments', // omit this line, if you don't need label
      theme,
      crossorigin: 'anonymous',
    }).forEach(([key, value]) => {
      script.setAttribute(key, value);
    });

    container?.appendChild(script);
  </script>
</BaseLayout>
