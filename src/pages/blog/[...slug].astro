---
import { getCollection, type CollectionEntry } from 'astro:content';
import { toSlug } from 'src/utils/string';
import PostLayout from '../../layouts/post.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    if (import.meta.env.PROD && data.isDraft) {
      return false;
    }
    return true;
  });
  const serieses = await getCollection('series');

  const sortedPosts = posts.sort(
    (a, b) => b.data.publishedDate.valueOf() - a.data.publishedDate.valueOf(),
  );

  return sortedPosts.map((post, index, posts) => {
    const foundSeries = serieses.find((series) =>
      series.data.posts.some((seriesPost) => seriesPost.slug === post.slug),
    );

    return {
      params: { slug: toSlug(post.data.title) },
      props: {
        currentPost: post,
        newerPost: posts[index - 1],
        olderPost: posts[index + 1],
        series: foundSeries,
      },
    };
  });
}

const { currentPost, olderPost, newerPost, series } = Astro.props;
const { Content } = await currentPost.render();

interface Props {
  currentPost: CollectionEntry<'blog'>;
  olderPost?: CollectionEntry<'blog'>;
  newerPost?: CollectionEntry<'blog'>;
  series: CollectionEntry<'series'> | undefined;
}
---

<PostLayout
  currentPostData={structuredClone(currentPost.data)}
  olderPostData={structuredClone(olderPost?.data)}
  newerPostData={structuredClone(newerPost?.data)}
  seriesData={structuredClone(series?.data)}
>
  <Content />
</PostLayout>
