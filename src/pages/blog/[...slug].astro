---
import { getCollection, getEntries, type CollectionEntry } from 'astro:content';
import { toSlug } from 'src/utils/string';
import PostLayout from '../../layouts/post.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    if (import.meta.env.PROD && data.isDraft) {
      return false;
    }
    return true;
  });
  const series = await getCollection('series');

  const promises = posts.map(async (post) => {
    const foundSeries = series.find((item) =>
      item.data.posts.some((seriesPost) => seriesPost.slug === post.slug),
    );

    if (!foundSeries) {
      return {
        params: { slug: toSlug(post.data.title) },
        props: { post, convertedSeries: undefined },
      };
    }
    const convertedSeries = await convertSeries(foundSeries);

    return {
      params: { slug: toSlug(post.data.title) },
      props: { post, convertedSeries },
    };

    async function convertSeries(series: CollectionEntry<'series'>) {
      const title = series.data.title;
      const seriesPosts = await getEntries(series.data.posts);
      const postLinks = seriesPosts.map((seriesPost) => {
        return {
          href: `/blog/${toSlug(seriesPost.data.title)}`,
          text: seriesPost.data.title,
        };
      });

      return { title, postLinks };
    }
  });

  return Promise.all(promises);
}
interface Props {
  post: CollectionEntry<'blog'>;
  convertedSeries?: {
    title: string;
    postLinks: Array<PostLink>;
  };
}
interface PostLink {
  href: string;
  text: string;
}

const { post, convertedSeries } = Astro.props;
const { Content } = await post.render();
---

<PostLayout
  postData={structuredClone(post.data)}
  convertedSeries={structuredClone(convertedSeries)}
>
  <Content />
</PostLayout>
